<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.zippy.shop.mapper.ShopMapper">
	<!-- 전체조회 -->
	<select id="getProductList" resultType="ProductVO">
		SELECT *
		FROM shop_product
		WHERE pro_status = 0
	</select>

	<!-- 카테고리 조회 -->
	<select id="getCategoryList" resultType="ProductVO"
		parameterType="ProductVO">
		SELECT s.*,
		b.comp_name FROM shop_product s
		JOIN business
		b
		ON s.email = b.email
		WHERE s.category = #{category}
		AND pro_status = 0
	</select>


	<!-- 키워드 조회 -->
	<select id="getKeywordList" resultType="ProductVO"
		parameterType="ProductVO">
		SELECT s.* ,
		b.comp_name
		FROM
		shop_product s
		JOIN
		business b
		ON s.email = b.email
		WHERE
		s.pro_name LIKE '%'||#{keyword}||'%'
		OR s.category LIKE '%'||#{keyword}||'%'
		OR s.email IN (SELECT email
		FROM
		business
		WHERE comp_name LIKE '%'||#{keyword}||'%'
		AND member_type=2)
		AND pro_status = 0
	</select>


	<!-- 단건조회(디테일) -->
	<select id="getProduct" resultType="ProductVO"
		parameterType="ProductVO">
		SELECT s.*, b.comp_name FROM shop_product s
		JOIN business
		b
		ON s.email = b.email
		WHERE s.pro_no = #{proNo}
	</select>
	<!-- 상세이미지 불러오기 -->
	<select id="getDetailImg" resultType="String"
		parameterType="ProductVO">
		SELECT pro_img
		FROM shop_product_img
		WHERE
		pro_no =
		#{proNo}
	</select>
	<!-- 상세옵션 불러오기 -->
	<select id="getDetailOpt" resultType="ProductOptionVO"
		parameterType="ProductOptionVO">
		SELECT
		opt_no,
		pro_no,
		opt_name,
		NVL(opt_price,0) opt_price
		FROM shop_product_option
		WHERE pro_no = #{proNo}
	</select>
	<!-- qna 등록 -->
	<insert id="insertQna" parameterType="QnaVO">
		<selectKey resultType="int" keyProperty="qnaNo" order="BEFORE"> 
				SELECT NVL( MAX(qna_no) , 0) + 1 FROM shop_qna
		</selectKey>
		INSERT INTO 
		shop_qna(qna_no, email, pro_no, question, answer_status, question_date, question_cate)
		VALUES(
		#{qnaNo},
		#{email},
		#{proNo},
		#{question},
		0,
		systimestamp,
		#{questionCate})
	</insert>
	<!-- qna 리스트 조회 -->
	<select	id="getQnaList" resultType="QnaVO">
		SELECT *
		FROM shop_qna
		WHERE pro_no = #{proNo}
		ORDER BY qna_no DESC
	</select>

	<!-- 장바구니 -->
	<!-- 장바구니 등록 -->
	<insert id="insertCart" parameterType="CartVO">
		INSERT INTO shop_cart
		VALUES(
		( SELECT NVL( MAX(cart_no) , 0) + 1 FROM shop_cart),
		#{email},
		#{cartPno},
		#{cartOptNo},
		#{cartQty})
	</insert>
	<!-- 내 장바구니 count -->
	<select id="getMyCart" resultType="Integer"
		parameterType="CartVO">
		SELECT NVL(count(*),0) countMycart
		FROM shop_cart
		WHERE
		email = #{email}
	</select>
	<!-- 장바구니에 등록된 내상품 전체조회 -->
	<select id="getMyCartList" resultType="CartVO"
		parameterType="CartVO">
		SELECT
		c.*,
		o.opt_no,
		o.pro_no,
		o.opt_name,
		NVL(opt_price,0)
		opt_price
		FROM shop_cart c
		LEFT OUTER JOIN shop_product_option o
		ON
		c.cart_opt_no = o.opt_no
		WHERE email = #{email}
		ORDER BY cart_no DESC
	</select>

	<!-- 장바구니 삭제 -->
	<delete id="deleteCart">
		DELETE
		shop_cart
		WHERE
		<foreach collection="selected" item="arr" separator="or">
			cart_no=
			#{arr.cartNo}
		</foreach>
	</delete>

	<!-- 주문 -->
	<!-- 장바구니에서 purchase으로 등록 -->
	<insert id="insertPur">
		<!-- <selectKey resultType="long" keyProperty="payCode" order="BEFORE"> 
			SELECT FLOOR(DBMS_RANDOM.VALUE(1000000000, 9999999999)) RANDOM FROM DUAL 
			</selectKey> -->
		INSERT INTO shop_purchase
		<foreach collection="selected" item="arr" index="index"
			separator="UNION ALL">
			SELECT
			(SELECT NVL( MAX(pur_no) , 0) + 1 FROM
			shop_purchase)+#{index},
			#{payCode},
			#{arr.cartPno},
			#{arr.cartOptNo,
			jdbcType=VARCHAR},
			#{arr.cartQty} ,
			#{arr.email},
			#{arr.cartPrice},
			#{arr.productVO.email},
			0,
			systimestamp,
			null
			FROM
			dual
		</foreach>
	</insert>
	<!-- 디테일에서 purchase로 등록 -->
	<insert id="insertPurOne">
		INSERT INTO shop_purchase(pur_no, pay_code, pur_pno, pur_opt_no, pur_qty, email, pur_price, business_email, order_status, order_date)
		VALUES(
		(SELECT NVL(MAX(pur_no) , 0) + 1 FROM shop_purchase),
		#{payCode},
		#{product.proNo},
		#{product.selectOptNo, jdbcType=VARCHAR},
		#{product.qty},
		#{email}, <!-- 사용자 -->
		#{product.purPrice},
		#{product.email}, <!-- 판매업체 -->
		0,
		systimestamp
		)
	</insert>
	<!-- 내 정보 조회 -->
	<select id="getMyInfo" resultType="GeneralUserVO">
		SELECT *
		FROM general_user
		WHERE email = #{email}
	</select>
	<!-- 주문한 상품 정보 조회 -->
	<select id="getMyPurList" resultType="PurchaseVO"
		parameterType="PurchaseVO">
		SELECT DISTINCT
		p.*,
		(SELECT o.opt_name
		FROM
		shop_product_option o
		WHERE o.opt_no IN (SELECT pur_opt_no FROM
		shop_purchase
		WHERE pur_no = #{purNo}) ) opt_name
		FROM
		shop_purchase p
		LEFT OUTER JOIN shop_product_option o
		ON p.pur_pno =
		o.pro_no
		WHERE p.pay_code = #{payCode}
		<if test="purNo != null">
			 AND p.pur_no = #{purNo}
		</if>
		ORDER BY p.pur_no
	</select>
	<!-- 주문정보 등록 -->
	<insert id="insertOrder" parameterType="OrderVO">
		INSERT INTO shop_order(order_no, email, pay_code, pay_method, 
		amount, buyer_name, buyer_tel, buyer_addr, buyer_zipcode, order_memo, 
		order_status, order_date)
		VALUES(
		(SELECT NVL( MAX(order_no) , 0) + 1 FROM shop_order),
		#{email},
		#{payCode},
		#{payMethod},
		#{amount},
		#{buyerName},
		#{buyerTel},
		#{buyerAddr},
		#{buyerZipcode},
		#{orderMemo},
		0,
		systimestamp)
	</insert>
	<!-- 주문 리스트 조회 -->
	<select id="getMyOrderList" resultType="OrderVO">
		SELECT *
		FROM shop_order
		WHERE email = #{email}
	</select>
	<!-- 주문정보 조회 -->
	<select id="getOrdProInfo" resultType="ProductVO">
		SELECT pro_name, pro_main_img
		FROM shop_product
		WHERE pro_no IN
		(SELECT pur_pno
		FROM shop_purchase
		WHERE pay_code = #{payCode})
	</select>
	<select id="getOneOrder" resultType="OrderVO">
		SELECT *
		FROM shop_order
		WHERE pay_code = #{payCode}
	</select>
	<!-- 후기 업데이트 -->
	<update id="updateRvStatus">
		UPDATE shop_purchase
		SET order_status = 2
		WHERE pur_no = #{purNo}
	</update>
	
	<!-- 마이페이지 -->
	<select id="getMyWishList" resultType="HashMap">
		SELECT *
		FROM bookmark b
		JOIN
		shop_product s ON b.service_id = s.pro_no
		WHERE
		b.service_type = 2
		AND
		b.email = #{email}
	</select>
	
	
	<!-- 판매자 -->
	<!-- 상품등록 -->
	<insert id="insertProduct">
			<selectKey resultType="int" keyProperty="product.proNo" order="BEFORE"> 
				SELECT NVL( MAX(pro_no) , 0) + 1 FROM shop_product
			</selectKey>
		INSERT INTO shop_product(pro_no, email, pro_name, pro_price, category,
		pro_main_img, pro_info, delivery_cost, pro_status)
		VALUES (
		#{product.proNo},
		#{product.email},
		#{product.proName},
		#{product.proPrice},
		#{product.category},
		#{product.proMainImg},
		#{product.proInfo},
		#{product.deliveryCost},
		0 <!-- 판매중 : 0, 판매불가 : 1 -->
		)
	</insert>
	<!-- 상세이미지 등록 -->
	<insert id="insertImg" parameterType="ProductImgVO">
		<selectKey keyProperty="proImgNo" order="BEFORE"
			resultType="int">
			SELECT NVL(MAX(pro_img_no),0) +1
			FROM shop_product_img
		</selectKey>
		INSERT INTO shop_product_img
		(
		pro_img_no,
		pro_no,
		pro_img
		)
		VALUES
		(
		#{proImgNo}
		,#{proNo}
		,#{proImg}
		)
	</insert>
	<!-- 옵션등록 -->
	<insert id="insertOpt">
		INSERT INTO shop_product_option(opt_no, pro_no, opt_name, opt_price)
		<foreach collection="options" item="arr" index="index" separator="UNION ALL">
			SELECT
			(SELECT NVL( MAX(opt_no) , 0) + 1 FROM shop_product_option)+#{index},
			#{arr.proNo},
			#{arr.optName},
			#{arr.optPrice}
			FROM
			dual
		</foreach>
	</insert>
	<!-- 판매상품 조회 -->
	<select id="getMyProList" resultType="ProductVO">
		SELECT *
		FROM
			(
			SELECT *
			FROM shop_product
			WHERE email = #{product.email}
			<if test="keyword != null">
			INTERSECT
			SELECT *
			FROM shop_product
			WHERE pro_no LIKE '%'||#{keyword}||'%'
			OR pro_name LIKE '%'||#{keyword}||'%'
			</if>
		)
		ORDER BY pro_no DESC
	</select>
	<!-- 판매상품 상태변경 -->
	<update id="updateStatus" parameterType="ProductVO">
		UPDATE shop_product
		SET pro_status = #{proStatus}
		WHERE pro_no = #{proNo}
	</update>
	<!-- 상품정보 수정 -->
	<update id="updateProduct" parameterType="ProductVO">
		UPDATE shop_product
		SET (pro_name, pro_price, category, pro_main_img, pro_info, delivery_cost)
		=(SELECT #{product.proName}, #{product.proPrice}, #{product.category}, #{product.proMainImg}, #{product.proInfo}, #{product.deliveryCost} FROM dual)
		WHERE pro_no = #{product.proNo}
	</update>
	<!-- 이미지 삭제(수정용) -->
	<delete id="deleteImg">
		DELETE FROM shop_product_img
		WHERE pro_no = #{proNo}
	</delete>
	<!-- 옵션 삭제(수정용) -->
	<delete id="deleteOpt">
		DELETE FROM shop_product_option
		WHERE pro_no = #{proNo}
	</delete>
	<!-- 판매내역 조회 -->
	<select id="getSellerPurList" resultType="PurchaseVO">
		SELECT p.*, g.user_name, s.pro_name
		FROM
		(
			SELECT *
			FROM shop_purchase
			WHERE business_email = #{product.email}
			<if test="keyword != null">
			INTERSECT
			SELECT *
			FROM shop_purchase
			WHERE pay_code LIKE '%'||#{keyword}||'%'
			OR email LIKE '%'||#{keyword}||'%'
			</if>
		) p 
		  JOIN general_user g
      ON p.email = g.email
      JOIN shop_product s
      ON p.pur_pno = s.pro_no
			ORDER BY pur_no DESC
	</select>
	<!-- 주문상태 변경 -->
	<update id="updateOrdStatus">
		UPDATE shop_purchase
		SET (order_status, delivery_date)
        =(SELECT #{orderStatus}, systimestamp FROM dual)
		WHERE pur_no =#{purNo}
	</update>

</mapper>