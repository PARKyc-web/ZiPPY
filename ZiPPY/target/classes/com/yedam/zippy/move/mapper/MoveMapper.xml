<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.zippy.move.mapper.MoveMapper">

	<insert id="insertContactEstimate" parameterType="MoveRequestVO">
		<selectKey keyProperty="estimateNo" order="BEFORE" resultType="int">
			SELECT NVL(MAX(estimate_no),0) +1 AS estimateNo 
			FROM UNTACT_ESTIMATE_MOVING
		</selectKey>
		INSERT INTO UNTACT_ESTIMATE_MOVING
		(
		ESTIMATE_NO,
		EMAIL,
		MOVING_OPTION,
		MOVING_MEMO,
		DEPART_ADDRESS,
		ARRIVE_ADDRESS,
		TO_CHAR(MOVING_DATE,'yy-mm-dd') MOVING_DATE,
		MOVING_TIME,
		ESTIMATE_TYPE,
		DEPART_ZIP_CODE,
		DEPART_DETAIL,
		DEPART_EXTRA,
		ARRIVE_ZIP_CODE,
		ARRIVE_DETAIL,
		ARRIVE_EXTRA,
		MOVE_TYPE,
		TO_CHAR(REQUEST_DATE,'yy-mm-dd') REQUEST_DATE,
		TO_CHAR(VISIT_DATE,'yy-mm-dd') VISIT_DATE,
		VISIT_TIME,
		COMMON_OPTION,
		RESERV_STATUS
		)
		VALUES
		(
		#{estimateNo},
		#{email},
		#{movingOption},
		#{movingMemo},
		#{departAddress},
		#{arriveAddress},
		#{movingDate},
		#{movingTime},
		#{estimateType},
		#{departZipCode},
		#{departDetail},
		#{departExtra},
		#{arriveZipCode},
		#{arriveDetail},
		#{arriveExtra},
		#{moveType},
		#{requestDate},
		#{visitDate},
		#{visitTime},
		#{commonOption},
		#{reservStatus}
		)
	</insert>
	
	<insert id="insertPhoto" parameterType="MoveRequestVO">
		<selectKey keyProperty="houseImgNo" order="BEFORE" resultType="int">
			SELECT NVL(MAX(house_img_no),0) +1 AS houseImgNo 
			FROM UNTACT_HOUSE_IMAGE
		</selectKey>
		
		INSERT INTO UNTACT_HOUSE_IMAGE
		(
		HOUSE_IMG_NO,
		ESTIMATE_NO,
		HOUSE_IMG,
		IMG_TYPE
		)
		VALUES
		(
		#{houseImgNo},
		#{estimateNo},
  		#{houseImg},
  		#{imgType}
		)
	</insert>
	
	<insert id="moveContactCheck" parameterType="MoveRequestVO">
		<selectKey keyProperty="estimateNo" order="BEFORE" resultType="int">
			SELECT NVL(MAX(estimate_no),0) +1 AS estimateNo 
			FROM UNTACT_ESTIMATE_MOVING
		</selectKey>
		INSERT INTO UNTACT_ESTIMATE_MOVING
		(
		ESTIMATE_NO,
		EMAIL,
		MOVING_OPTION,
		MOVING_MEMO,
		DEPART_ADDRESS,
		ARRIVE_ADDRESS,
		TO_CHAR(MOVING_DATE,'yy-mm-dd') MOVING_DATE,
		MOVING_TIME,
		ESTIMATE_TYPE,
		DEPART_ZIP_CODE,
		DEPART_DETAIL,
		DEPART_EXTRA,
		ARRIVE_ZIP_CODE,
		ARRIVE_DETAIL,
		ARRIVE_EXTRA,
		MOVE_TYPE,
		TO_CHAR(REQUEST_DATE,'yy-mm-dd') REQUEST_DATE,
		TO_CHAR(VISIT_DATE,'yy-mm-dd') VISIT_DATE,
		VISIT_TIME,
		COMMON_OPTION,
		RESERV_STATUS
		)
		VALUES
		(
		#{estimateNo},
		#{email},
		#{movingOption},
		#{movingMemo},
		#{departAddress},
		#{arriveAddress},
		#{movingDate},
		#{movingTime},
		#{estimateType},
		#{departZipCode},
		#{departDetail},
		#{departExtra},
		#{arriveZipCode},
		#{arriveDetail},
		#{arriveExtra},
		#{moveType},
		#{requestDate},
		#{visitDate},
		#{visitTime},
		#{commonOption},
		#{reservStatus}
		)
	</insert>
	
	<!-- 견적서 작성 -->
	<insert id="makeEstimate" parameterType="MoveResponseVO" useGeneratedKeys="true">
		<selectKey keyProperty="movingResponseNo"  order="BEFORE" resultType="int">
			SELECT NVL(MAX(MOVING_RESPONSE_NO),0) +1 AS movingResponseNo 
			FROM MOVING_RESPONSE
		</selectKey>
			INSERT INTO MOVING_RESPONSE
			(
			MOVING_RESPONSE_NO,
			ESTIMATE_NO,
			EMAIL,
			FIRST_ESTIMATE_PRICE,
			FIRST_ESTIMATE_TYPE,
			SECOND_ESTIMATE_PRICE,
			SECOND_ESTIMATE_TYPE,
			RESERV_STATUS,
			COMP_NAME,
			RESPONSE_MEMO
			)
			VALUES
			(
			#{movingResponseNo},
			#{estimateNo},
			#{email},	
			#{firstEstimatePrice},
			#{firstEstimateType},
			#{secondEstimatePrice},
			#{secondEstimateType},
			#{reservStatus},
			#{compName},
			#{responseMemo}
			)
	</insert>
	
	<!-- 견적 작성했는지 안했는지 여부 -->
	<select id="moveWhether" parameterType="MoveCompanyEstimateVO" resultType="MoveCompanyEstimateVO">
		SELECT *
		FROM moving_response r, untact_estimate_moving m
		WHERE r.estimate_no = m.estimate_no
		AND m.estimate_no = #{estimateNo}
		AND r.email = #{email}
		AND r.moving_response_no IS NOT NULL
	</select>
	
	<!-- 사용자가 견적요청 후 견적상태 1로 변경 -->
	<update id="moveStatusUpdateZero" parameterType="MoveRequestVO">
		UPDATE untact_estimate_moving 
        SET reserv_status = 1
        WHERE estimate_no = #{estimateNo}  
        AND email = #{email}
	</update>
	
	<!-- 업체가 1차견적 발송 후 견적상태 1로 변경 -->
	<update id="moveStatusUpdate" parameterType="hashmap">
		UPDATE moving_response 
        SET reserv_status = 1
        WHERE estimate_no = #{estimateNo}  
        AND email = #{email}
	</update>
	
	<!-- 업체가 2차 견적으로 견적서 업데이트 -->
	<update id="moveEstimateUpdate" parameterType="MoveResponseVO">
		UPDATE moving_response
		SET second_estimate_type = #{secondEstimateType},
		    second_estimate_price = #{secondEstimatePrice}
		WHERE estimate_no = #{estimateNo}
	</update>
	
	<!-- 업체가 2차견적 발송 후 견적상태 2로 변경 -->
	<update id="moveStatusSecondUpdate" parameterType="MoveResponseVO">
		UPDATE moving_response 
        SET reserv_status = 2
        WHERE estimate_no = #{estimateNo}  
        AND email = #{email}
	</update>
	
	<!-- 사용자가 예약요청 후 견적상태 3로 변경 -->
	<update id="moveStatusThirdUpdate" parameterType="MoveResponseVO">
		UPDATE moving_response 
        SET reserv_status = 3
        WHERE moving_response_no =#{movingResponseNo}
	</update>
	
	<!-- 업체가 예약확정 후 견적상태 4로 변경 -->
	<update id="moveStatusFourthUpdate" parameterType="MoveResponseVO">
		UPDATE moving_response 
        SET reserv_status = 4
        WHERE estimate_no = #{estimateNo}  
        AND email = #{email}
	</update>
	
	<!-- 이사완료 후 견적상태 5로 변경 -->
	<update id="moveStatusFifthUpdate" parameterType="MoveResponseVO">
		UPDATE moving_response 
        SET reserv_status = 5
        WHERE estimate_no = #{estimateNo}  
        AND email = #{email}
	</update>
	
	<!-- 후기작성완료 시 9로 변경 -->
	<update id="moveStatusCancleUpdate" parameterType="MoveResponseVO">
		UPDATE moving_response 
        SET reserv_status = 9
        WHERE moving_response_no =#{movingResponseNo}
	</update>
	
	<!-- 업체가 들어온 견적 전체조회 -->
	<select id="getEstimateList" parameterType="MoveEstimateVO" resultType="MoveRequestVO">
		SELECT *
		FROM untact_estimate_moving
		WHERE request_date LIKE '%'||'2'||'%'

		<if test="dropbox2 == '내 지역만 조회'">
		AND SUBSTR(depart_address, 1, 2) LIKE 
				'%'|| (SELECT SUBSTR(comp_address, 1,2) 
					   FROM business
					   WHERE email = #{email}) || '%'
		</if>
		
		<if test="dropbox == '대면견적'">
		AND estimate_type = '대면견적'
		</if>
		<if test="dropbox == '비대면견적'">
		AND estimate_type = '비대면견적'
		</if>
	
		<if test="dropbox == '현재날짜요청'">
		AND TO_CHAR(REQUEST_DATE,'yy-mm-dd') =  TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD')
		</if>
		
		<if test="dropbox == '최신요청일자순'">
		ORDER BY TO_CHAR(REQUEST_DATE,'yy-mm-dd')  DESC
		</if>
		<if test="dropbox == '오래된요청일자순'">
		ORDER BY TO_CHAR(REQUEST_DATE,'yy-mm-dd')  ASC
		</if>
		<if test="dropbox == '출발지순'">
		ORDER BY SUBSTR(depart_address, 1, 2) DESC
		</if>
		<if test="dropbox == '도착지순'">
		ORDER BY SUBSTR(arrive_address, 1, 2) DESC
		</if>
		
	</select>
	
	<!-- 전체조회 - 업체가 자신이 보낸 견적서 조회 -->
	
	<select id="companyEstimate" parameterType="MoveCompanyEstimateVO" resultType="MoveCompanyEstimateVO">
		
		SELECT m.*, r.moving_response_no,r.estimate_no, r.first_estimate_type, r.first_estimate_price,
		r.email AS business_email, r.second_estimate_type, r.second_estimate_price, r.reserv_status AS reserv_statuss, 
		r.comp_name, r.response_memo
		FROM untact_estimate_moving m, moving_response r
		WHERE m.estimate_no = r.estimate_no
		AND r.email = #{businessEmail}
		<!-- AND r.reserv_status = 1 -->
		<if test="dropbox2 == '날짜순'">
		ORDER BY m.TO_CHAR(REQUEST_DATE,'yy-mm-dd')  DESC
		</if>
		<if test="dropbox2 == '견적방법순'">
		ORDER BY m.estimate_type DESC
		</if>
		<if test="dropbox2 == '견적상태순'">
		ORDER BY r.reserv_status DESC
		</if>
	</select>
	
	<!-- 전체조회 - 유저가 자기 견적히스토리 조회 -->
	<select id="getEstimateResult" parameterType="MoveEstimateVO" resultType="MoveRequestVO">
		SELECT * FROM
		UNTACT_ESTIMATE_MOVING
		WHERE email=#{email}
		
		<if test="dropbox == '날짜순'">
		ORDER BY TO_CHAR(REQUEST_DATE,'yy-mm-dd')  DESC, estimate_no DESC
		</if>
		<if test="dropbox == '견적방법순'">
		ORDER BY estimate_type DESC, TO_CHAR(REQUEST_DATE,'yy-mm-dd')  DESC, estimate_no DESC
		</if>
	</select>
	
	<!-- 비대면 사진조회 -->
	<select id="selectAllPhoto" parameterType="MoveImageVO" resultType="MoveImageVO">
		select * from untact_house_image
	</select>
	
	<!-- 받은 견적 확인 -->
	<select id="getMyEstimateList" parameterType="MoveMyListVO" resultType="MoveMyListVO">	
		SELECT m.email user_email, m.TO_CHAR(REQUEST_DATE,'yy-mm-dd') REQUEST_DATE, r.*, b.comp_intro, b.phone, b.comp_address, (SELECT AVG(total_rating)
		FROM review_board
		WHERE service_type = 3
		AND service_id = r.email) total_rating
		FROM untact_estimate_moving m JOIN moving_response r
		ON (m.estimate_no = r.estimate_no)
		JOIN business b
		ON (r.comp_name = b.comp_name)
		WHERE m.email = #{userEmail}
        
        <if test="dropbox2 == '평점순'">
		ORDER BY total_rating DESC
		</if>
		<if test="dropbox2 == '높은가격순'">
		ORDER BY r.first_estimate_price DESC
		</if>
		<if test="dropbox2 == '낮은가격순'">
		ORDER BY r.first_estimate_price
		</if>
		<if test="dropbox2 == '지역순'">
		ORDER BY SUBSTR(b.comp_address, 1, 2)
		</if>
	</select>
	
	<!-- 받은견적조회 - 단건조회 -->
	<select id="getMyEstimateListOne" resultType="MoveMyListVO">
		SELECT m.email user_email, m.TO_CHAR(REQUEST_DATE,'yy-mm-dd') REQUEST_DATE, r.*, b.comp_intro, b.phone, b.comp_address, (SELECT AVG(total_rating)
		FROM review_board
		WHERE service_type = 3
		AND service_id = r.email) total_rating
		FROM untact_estimate_moving m JOIN moving_response r
		ON (m.estimate_no = r.estimate_no)
		JOIN business b
		ON (r.comp_name = b.comp_name)
		WHERE m.email = #{userEmail}
		AND r.moving_response_no = #{movingResponseNo}
        ORDER BY m.estimate_no DESC
	</select>
	
	<!-- 사용자가 예약 조회 -->
	<select id="moveReserve" parameterType="MoveMyListVO" resultType="MoveMyListVO">
		
		SELECT m.email user_email, m.TO_CHAR(REQUEST_DATE,'yy-mm-dd') REQUEST_DATE, r.*, b.comp_intro, b.phone, b.comp_address, (SELECT AVG(total_rating)
		FROM review_board
		WHERE service_type = 3
		AND service_id = r.email) total_rating
		FROM untact_estimate_moving m JOIN moving_response r
		ON (m.estimate_no = r.estimate_no)
		JOIN business b
		ON (r.comp_name = b.comp_name)
		WHERE m.email = #{userEmail}
		AND r.reserv_status IN(3,4,5,9)
        
        <if test="dropbox2 == '예약요청'">
		AND r.reserv_status = 3
        ORDER BY m.estimate_no DESC 
		</if>
		<if test="dropbox2 == '예약완료'">
		AND r.reserv_status = 4
        ORDER BY m.estimate_no DESC 
		</if>
		<if test="dropbox2 == '이사완료'">
		AND r.reserv_status IN(5, 9)
        ORDER BY m.estimate_no DESC 
		</if>
	</select>
	
	
	<!-- 업체조회 -->
	<select id="getCompanyList" parameterType="MoveMyListVO" resultType="MoveMyListVO">
		SELECT b.comp_intro, b.phone, b.comp_address, b.comp_name, b.email, (SELECT AVG(total_rating)
		FROM review_board
		WHERE service_type = 3
		AND service_id = b.email) total_rating
		FROM business b
		WHERE b.member_type = 3
		<if test="dropbox2 == '평점순'">
		ORDER BY total_rating DESC
		</if>
		<if test="dropbox2 == '지역순'">
		ORDER BY SUBSTR(b.comp_address, 1, 2)
		</if>
	</select>
	
	<!-- 업체조회-단건 -->
	<select id="moveCompanyOne" parameterType="MoveMyListVO" resultType="MoveMyListVO">
		SELECT b.comp_intro, b.phone, b.comp_address, b.comp_name, b.email, (SELECT AVG(total_rating)
		FROM review_board
		WHERE service_type = 3
		AND service_id = b.email) total_rating
		FROM business b
		WHERE b.member_type = 3
        AND b.email = #{email} 
        
		<if test="dropbox == '평점순'">
		ORDER BY total_rating DESC
		</if>
		<if test="dropbox == '지역순'">
		ORDER BY SUBSTR(b.comp_address, 1, 2)
		</if>
	</select>
	
	
	<!-- 해당 상품 찜 유무 -->
	<select id="getWishOneList" resultType="BookmarkVO" parameterType="hashmap">
		SELECT * 
		FROM bookmark
		WHERE service_id = #{sId}
		AND email = #{email}
		AND service_type = #{serviceType}
	</select>
	
	<!-- 리뷰조회 -->
	<select id="showReview" resultType="MoveReviewVO" parameterType="MoveReviewVO">
		SELECT b.*, r.*, r.email writer, (SELECT AVG(r.total_rating) FROM review_board r JOIN business b
		ON r.service_id = b.email WHERE r.service_type = 3 AND r.service_id=#{serviceId}) company_total_rating, (SELECT count(r.review_no) FROM review_board r JOIN business b
		ON r.service_id = b.email WHERE r.service_type = 3 AND r.service_id=#{serviceId}) review_count
		FROM review_board r JOIN business b 
		ON (r.service_id = b.email)
		WHERE r.service_type=3 
		AND r.service_id = #{serviceId}
		ORDER BY review_no DESC
	</select>
	
	<!-- 리뷰개수 -->
	<select id="moveRvCount" resultType="MoveReviewVO" parameterType="String">
		SELECT COUNT(review_content) AS review_count 
		FROM review_board
		WHERE service_id = #{serviceId}
	</select>
	
</mapper>